/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package openguardian4;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import openguardian4.Bluetooth.BluetoothMessage;
import openguardian4.Bluetooth.BluetoothMessageType;

public class App {

	private static List<BluetoothMessage> parseLogFile(String filename) throws Exception {
		List<BluetoothMessage> messages = new ArrayList<>();
		Map<String, String> cryptoPairs = new HashMap<>(); // contains the pairs of encryped and decrypted msgs
		List<String> lines = new ArrayList<>();
		File f = new File(filename);
		
		if (!f.exists() || !f.isFile()) {
			throw new IOException("File does not exist on disk: " + f);
		}

		try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
			String line;
			while ((line = br.readLine()) != null) {
				lines.add(line);
			}
		}

		lines = Utils.removeComments(lines); // remove any comments in the logs

		// extract the crypto pairs first since its not necessarily in order with
		// the other messages
		for (String line : lines) {
			String[] parts = line.split(",");
			// long timestamp = Long.parseLong(parts[0]);
			String module = parts[1];
			String hook = parts[2];
			String params = parts[3];

			if ("sake".equals(module)) {
				String[] cryptoParams = params.split(";");
				if ("encrypt".equals(hook)) {
					cryptoPairs.put(cryptoParams[1], cryptoParams[0]);
				} else if ("decrypt".equals(hook)) {
					cryptoPairs.put(cryptoParams[0], cryptoParams[1]);
				}
			}
		}

		// extract the messages
		for (String line : lines) {

			String[] parts = line.split(",");
			long timestamp = Long.parseLong(parts[0]); // / 1000;
			String module = parts[1];
			String hook = parts[2];
			String params = parts[3];

			if ("bt".equals(module)) {
				String[] btParams = params.split(";");
				String service = btParams[0];
				String data = btParams[1];
				// check if we have a decrypted message pair
				boolean decrypted = cryptoPairs.containsKey(data);
				if (decrypted) {
					data = cryptoPairs.get(data);
				}
				// get type
				BluetoothMessageType type = null;
				for (BluetoothMessageType t : BluetoothMessageType.values()) {
					if (t.name().equals(hook.toUpperCase())) {
						type = t;
					}
				}
				if (type == null) {
					throw new Exception("Could not find BluetoothMessageType: " + type);
				}
				BluetoothMessage msg = new BluetoothMessage(timestamp, type, service,
						Utils.hexStrToBytes(data), decrypted);
				messages.add(msg);
			}
		}
		Collections.sort(messages); // fix time order
		return messages;
	}

	public static void main(String[] args) {
		if (args.length < 1) {
			System.err.println("No file was given in the arguments!");
			System.exit(1);
		}

		List<BluetoothMessage> messages = new ArrayList<BluetoothMessage>();
		try {
			messages = parseLogFile(args[0]);
		} catch (Exception e) {
			System.err.println("Could not parse log file: " + e);
			System.exit(1);
		}

		for (BluetoothMessage msg : messages) {
			// if (msg.getParsedMessage() != null) {
			System.out.println(msg);
			// } else {
			// System.out.println(":(");
			// }
		}
	}
}
